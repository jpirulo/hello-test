* Configuracion Git
git config --global user.name "usuario"
git config --global user.emal "email@email.com"

git init inicializa una carpeta con control de versiones en pocas palabras es un repositorio
cuando se inicia se crea una rama llamada master

cambiar tema del bash https://ohmyz.sh/#install

* git branch -m main (cambia el nombre de la rama)

$ git status muestra archivos que no se han actualizado en git

* para anadir archivos 

git add (filename)

git commit -m comentario ("actauliza el archvivo al sistema de git)

Revertir cambios. 
git checkout regresar a los cambios antes de hacer commit.

observas el log en ramas
$ git log --graph
$ git log --graph --pretty=oneline
$ git log --graph --decorate --all --oneline

crear alias (para ejecutar comandos largos en una sola linea sin necesidad de escribirlos )
$ git config --global alias.tree "log --graph --decorate -all --oneline"
alias.(nombre del aliias)

ignorar archivos
crear un archivo llamado .gitignore
* git diff 
muestra las diferencias antes de hacer el commit
****************1/18/2023**************************
git reset (descartar cambios) 
git reset --hard (id del ultimo clog) 
git reflog (muestra todo el historia incluyendo los reset que no aparecen en el git log)
git tag (donde se modifican las versiones )
git tag (muestra todos los tags) tambien me sirve como referencia en vez de colocar el id, para regresar a un punto especifico 
      uso el git checkout tags/clase_1 
git checkout main regreso a la rama ppal

ramas----
git branch (nombre rama)
git branch login
para moverme entre las ramas 
➜ git switch login me muevo a esa rama
git merge (combinar cambios ) entre las ramas (main) -> y la rama que este posicionado.

git stash  (almacena temporalmente solo queda reflejado en el local, no se guarada en la rama)
git diff compara archivos y ramas

git branch -d Login (elimina rama )

Documentacion espanol. https://training.github.com/downloads/es_ES/github-git-cheat-sheet/

Pasos para cear github.
red social para desarrolladores.

github.com/<usuairo> tu pagina ppal

crear clvae ssh (revisar disco local )
C:\Users\jpiru\.ssh 

Abra Git Bash.

Pega el siguiente texto, que sustituye tu dirección de correo electrónico en GitHub.

$ ssh-keygen -t ed25519 -C "your_email@example.com"

Verifica que el agente ssh-agent se esté ejecutando. Puedes usar las instrucciones de "Auto-lanzamiento ssh-agent" en "Trabajar con contraseñas de clave SSH o iniciarla manualmente:

# start the ssh-agent in the background
$ eval "$(ssh-agent -s)"
> Agent pid 59566

$ ssh-add ~/.ssh/id_ed25519

ir a github
opcione usuario
https://github.com/settings/keys

New SSh

Probar tu conexión SSH
ssh -T git@github.com
git push -u origin main



---
transferir de git a github
debes estar en el directorio creado en git (local)
git remote add origin https://github.com/jpirulo/tttt.git (indica emparejar el repositorio)
git push (subir los archivos de local al repositorio)

git fetch (descarga en local el historial de los cambios sin descargar los cambios)
